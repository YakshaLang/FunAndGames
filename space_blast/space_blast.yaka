# All assets from https://www.kenney.nl/assets/
# Code ported to Yaksha based on https://github.com/tashvit/space-blast

import libs.os
import libs.console
import raylib as rl
import raylib.utils
import libs.numbers as num
import libs.perlin
import libs.random

SCENE_TITLE: Const[u8] = 0u8
SCENE_PLAY: Const[u8] = 0u8
SCENE_GAME_OVER: Const[u8] = 0u8
GAME_W: Const[int] = 1920
GAME_H: Const[int] = 1080

class State:
    frame_count: u64
    seed: u64
    assets: Assets
    player_x: int
    player_y: int
    speed: int
    stars: Array[Tuple[int, int, int, int]]

class Assets:
    loaded: bool
    bg: rl.Color
    white: rl.Color
    player: rl.Texture2D
    enemy1: rl.Texture2D
    enemy2: rl.Texture2D
    enemy3: rl.Texture2D
    enemy4: rl.Texture2D
    enemy5: rl.Texture2D
    meteor: rl.Texture2D

def load_image(s: str) -> rl.Texture2D:
    path: str
    if os.is_windows():
        path = "assets\\img\\" + s
    else:
        path = "assets/img/" + s
    console.cyan("Loading texture")
    console.red(" := ")
    console.green(path)
    println("")
    return rl.load_texture(path)

def update_stars(s: State) -> None:
    c: int = 0
    while c < 100:
        # y += speed
        s.stars[c][1] += s.stars[c][3]
        # if we are out of the screen recreate the star
        if s.stars[c][1] > GAME_H + 10:
            s.stars[c][1] = -10
            s.stars[c][0] = rl.get_random_value(0, GAME_W)
        c += 1

def draw_stars(s: State) -> None:
    c: int = 0
    while c < 100:
        star: Tuple[int, int, int, int] = s.stars[c]
        # If the star size is 4 draw a meteor
        if s.stars[c][2] == 4:
            rl.draw_texture(s.assets.meteor, star[0], star[1], s.assets.white)
        else:
            rl.draw_circle(star[0], star[1], cast("float", star[2]), s.assets.white)
        c += 1

def game_step(d: utils.Data) -> None:
    s: State = cast("State", d)
    ensure_assets(s)
    rl.begin_drawing()
    rl.clear_background(s.assets.bg)
    # ----------------------------------------------
    # ----------------------------------------------
    if rl.is_key_down(rl.KEY_W):
        s.player_y -= s.speed
    if rl.is_key_down(rl.KEY_A):
        s.player_x -= s.speed
    if rl.is_key_down(rl.KEY_S):
        s.player_y += s.speed
    if rl.is_key_down(rl.KEY_D):
        s.player_x += s.speed
    update_stars(s)
    draw_stars(s)
    rl.draw_texture(s.assets.player, s.player_x, s.player_y, s.assets.white)
    # -----------------------------------------------
    # ----------------------------------------------
    rl.draw_fps(0, 0)
    rl.end_drawing()
    s.frame_count = s.frame_count + 1u64

def init_state() -> State:
    s: State = State()
    s.frame_count = 0u64
    s.assets = Assets()
    s.assets.loaded = False
    s.seed = random.init_random()
    s.player_x = GAME_H / 2
    s.player_y = GAME_W / 2
    s.speed = 5
    s.stars = arrnew("Tuple[int, int, int, int]", 100)
    c: int = 0
    while c < 100:
        s.stars[c][0] = rl.get_random_value(0, GAME_W)
        s.stars[c][1] = rl.get_random_value(0, GAME_H)
        s.stars[c][2] = rl.get_random_value(1, 4)
        s.stars[c][3] = rl.get_random_value(1, 4)
        c += 1
    return s

def ensure_assets(s: State) -> None:
    if s.assets.loaded:
        return
    s.assets.bg = rl.color(0, 0, 0, 255)
    s.assets.white = rl.color(255, 255, 255, 255)
    s.assets.player = load_image("playerShip1_blue.png")
    s.assets.enemy1 = load_image("shipBeige_manned.png")
    s.assets.enemy2 = load_image("shipBlue_manned.png")
    s.assets.enemy3 = load_image("shipPink_manned.png")
    s.assets.enemy4 = load_image("shipGreen_manned.png")
    s.assets.enemy5 = load_image("shipYellow_manned.png")
    s.assets.meteor = load_image("meteorGrey_tiny2.png")
    s.assets.loaded = True

def del_state(current: utils.Data) -> None:
    s: State = cast("State", current)
    if s.assets.loaded:
        rl.unload_texture(s.assets.player)
        rl.unload_texture(s.assets.enemy1)
        rl.unload_texture(s.assets.enemy2)
        rl.unload_texture(s.assets.enemy3)
        rl.unload_texture(s.assets.enemy4)
        rl.unload_texture(s.assets.enemy5)
    del s.assets
    del s

def main() -> int:
    s: State = init_state()
    rl.init_window(GAME_W, GAME_H, "Space blast")
    utils.run_game_loop(60, cast("utils.Data", s))
    if not utils.is_hot_reload():
        del_state(cast("utils.Data", s))
    return 0
